 fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from ..database import SessionLocal, engine
from .. import crud, models, schemas
import faker
import plotly.graph_objs as go
from fastapi.responses import JSONResponse

router = APIRouter()
models.Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.post("/generate/")
def generate_employees(n: int = 5, db: Session = Depends(get_db)):
    fake = faker.Faker()
    for _ in range(n):
        emp = schemas.EmployeeCreate(
            name=fake.name(),
            age=fake.random_int(22, 60),
            department=fake.job().split()[0],
            position=fake.job(),
            salary=round(fake.random_number(digits=5), 2),
            performance_score=round(fake.random.uniform(1.0, 5.0), 2)
        )
        crud.create_employee(db, emp)
    return {"message": f"{n} employees created"}

@router.get("/employees/", response_model=list[schemas.EmployeeRead])
def read_employees(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return crud.get_employees(db, skip, limit)



@router.get("/visualize/performance")
def performance_chart(db: Session = Depends(get_db)):
    employees = crud.get_employees(db, limit=100)
    names = [emp.name for emp in employees]
    scores = [emp.performance_score for emp in employees]

    chart = go.Figure(data=[
        go.Bar(name='Performance Score', x=names, y=scores)
    ])
    chart.update_layout(title="Employee Performance Scores",
                        xaxis_title="Employee",
                        yaxis_title="Score (1-5)")

    return JSONResponse(content=chart.to_plotly_json())
